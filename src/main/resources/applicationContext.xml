<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- Using this line we turn on availability to use scanning of the classes to find a @Component annotation    -->
    <!-- Classes with @Component annotation will be our beans    -->
    <context:component-scan base-package="dlivitin.springapp1"/>

    <!-- Connecting properties file to the applicationContext xml file   -->
    <!--    <context:property-placeholder location="classpath:musicPlayer.properties"/>-->




    <!-- Creating music bean(specifying the class of needed music) and then we are creating a music player bean and inject musicBean   -->
    <!-- Specifying the init-method(method that will be called during creating bean) and destroy-method( during termination)        -->
    <!-- For the beans with scope = prototype the destroy method is not invoked   -->
    <!-- Factory-method is method with the help of which we can create a new object   -->
    <!--    <bean id="classicalMusicBean"-->
    <!--          class="dlivitin.springapp1.ClassicalMusic"-->
    <!--          init-method="doMyInit"-->
    <!--          destroy-method="doMyDestroy"-->
    <!--          factory-method="getClassicalMusic">-->
    <!--    </bean>-->

    <!--    <bean id="rockMusicBean"-->
    <!--          class="dlivitin.springapp1.RockMusic">-->
    <!--    </bean>-->

    <!-- Dependency Injection(DI) via constructor in the XML file   -->

    <!--    <bean id="musicPlayer"-->
    <!--          class="dlivitin.springapp1.MusicPlayer">-->
    <!--        <constructor-arg ref="musicBean"/>-->
    <!--    </bean>-->


    <!-- Dependency injection via setters in class MusicPlayer   -->

    <!--    <bean id="musicPlayer"-->
    <!--          class="dlivitin.springapp1.MusicPlayer">-->
    <!--        <property name="music" ref="musicBean"/>-->
    <!--        <property name="name" value="SomeName"/>-->
    <!--        <property name="volume" value="50"/>-->
    <!--    </bean>-->

    <!-- Dependency injection using setters and taking information from properties file    -->
    <!-- !!!! By default we have scope - 'singleton' ( it means that all the variables in main class which were created from the same bean will reference on the same object(bean)    -->
    <!--    <bean id="musicPlayer"-->
    <!--          class="dlivitin.springapp1.MusicPlayer">-->
    <!--        <property name="musicList">-->
    <!--            <list>-->
    <!--                <ref bean="classicalMusicBean"/>-->
    <!--                <ref bean="rockMusicBean"/>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        <property name="name" value="${musicPlayer.name}"/>-->
    <!--        <property name="volume" value="${musicPlayer.volume}"/>-->
    <!--    </bean>-->


    <!-- We can set scope = prototype (in that case for all variables created using this bean new object will be created). Each variable will reference to its own object.    -->

    <!--    <bean id="musicPlayer"-->
    <!--          class="dlivitin.springapp1.MusicPlayer" scope="prototype">-->
    <!--        <property name="musicList">-->
    <!--            <list>-->
    <!--                <ref bean="classicalMusicBean"/>-->
    <!--                <ref bean="rockMusicBean"/>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        <property name="name" value="${musicPlayer.name}"/>-->
    <!--        <property name="volume" value="${musicPlayer.volume}"/>-->
    <!--    </bean>-->

</beans>